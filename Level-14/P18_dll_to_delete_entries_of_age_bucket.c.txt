/* 18.DLL: Store the list of records in mutiple DLLs according to age buckets (21-30, 31-40, 41-50, 51-60). 
Print the DLL.Delete the entries in the age bucket 41-50 and print the DLL once again*/

#include<stdio.h>
#include<stdlib.h>
#include<string.h>

#define SIZE 100

typedef struct node 
{
    int id;
    char fname[SIZE];
    char lname[SIZE];
    char gender[SIZE];
    char occupation[SIZE];
    int age;
    struct node *next;
    struct node *prev;
} club_member;

club_member *head_21_30 = NULL;
club_member *head_31_40 = NULL;
club_member *head_41_50 = NULL;
club_member *head_51_60 = NULL;

void create_list(club_member **head, club_member m);
void display(club_member *head, char *age_bucket);
void delete_age_bucket(club_member **head, int min_age, int max_age);
void release_memory(club_member **head);

int main() 
{
    FILE *fp;
    char buf1[SIZE], buf2[SIZE], buf3[SIZE], buf4[SIZE], buf5[SIZE];
    
    fp = fopen("Club_Membership_2020.txt", "r");
    if(fp == NULL) 
    {
        printf("Error in opening file\n");
        exit(1);
    }

    int i = 0;
    while(i < 16) 
    {
        club_member m;
        if(i == 0) 
        {
            fscanf(fp, "%s %s %s %s %s", buf1, buf2, buf3, buf4, buf5);
        }
        else 
        {
            fscanf(fp, "%d %s %s %s %s %d", &m.id, m.fname, m.lname, m.gender, m.occupation, &m.age);
            if(m.age >= 21 && m.age <= 30)
                create_list(&head_21_30, m);
            else if(m.age >= 31 && m.age <= 40)
                create_list(&head_31_40, m);
            else if(m.age >= 41 && m.age <= 50)
                create_list(&head_41_50, m);
            else if(m.age >= 51 && m.age <= 60)
                create_list(&head_51_60, m);
        }
        i++;
    }
    
    printf("\nBefore deleting age bucket 41-50:\n");
    display(head_21_30, "21-30");
    display(head_31_40, "31-40");
    display(head_41_50, "41-50");
    display(head_51_60, "51-60");
    
    delete_age_bucket(&head_41_50, 41, 50);
    
    printf("\nAfter deleting age bucket 41-50:\n");
    display(head_21_30, "21-30");
    display(head_31_40, "31-40");
    display(head_41_50, "41-50");
    display(head_51_60, "51-60");
    
    release_memory(&head_21_30);
    release_memory(&head_31_40);
    release_memory(&head_41_50);
    release_memory(&head_51_60);
    
    fclose(fp);
    return 0;
}

void create_list(club_member **head, club_member m) 
{
    club_member *newnode = (club_member *)malloc(sizeof(club_member));
    if(newnode == NULL) 
    {
        printf("Cannot allocate memory\n");
        exit(1);
    }
    *newnode = m;
    newnode->next = NULL;
    newnode->prev = NULL;
    if(*head == NULL) 
    {
        *head = newnode;
    }
    else 
    {
        club_member *temp = *head;
        while(temp->next != NULL) 
        {
            temp = temp->next;
        }
        temp->next = newnode;
        newnode->prev = temp;
    }
}

void display(club_member *head, char *age_bucket) 
{
    printf("\nAge Bucket %s:\n", age_bucket);
    if(head == NULL) 
    {
        printf("No data in the list\n");
        return;
    }

    club_member *temp = head;
    while(temp != NULL) 
    {
        printf("%d\t%s %s\t\t%s\t%s\t\t%d\n", temp->id, temp->fname, temp->lname, temp->gender, temp->occupation, temp->age);
        temp = temp->next;
    }
}

void delete_age_bucket(club_member **head, int min_age, int max_age) 
{
    club_member *current = *head;
    club_member *prev = NULL;
    club_member *temp = NULL;

    while(current != NULL) 
    {
        if(current->age >= min_age && current->age <= max_age) 
        {
            if(prev == NULL) 
            {
                *head = current->next;
            } 
            else 
            {
                prev->next = current->next;
            }
            temp = current;
            current = current->next;
            free(temp);
        } 
        else 
        {
            prev = current;
            current = current->next;
        }
    }
}

void release_memory(club_member **head) 
{
    club_member *temp = *head;
    while(temp != NULL) 
    {
        club_member *temp1 = temp;
        temp = temp->next;
        free(temp1);
    }
    *head = NULL;
}
