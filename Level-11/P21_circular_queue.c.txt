// 21. Program to implement circular queues

#include <stdio.h>
#include <stdlib.h>

struct node 
{
    int data;
    struct node* next;
};

struct node *front = NULL;  
struct node *rear = NULL; 

void enqueue(int data);  
void dequeue();  
void display();

int main() 
{
    int ch, data;
    while(1) 
    {
        printf("\n1. Enqueue\n");
        printf("2. Dequeue\n");
        printf("3. Display\n");
        printf("4. Exit\n");
        printf("Enter your choice: ");
        scanf("%d", &ch);

        switch(ch) 
        {
            case 1:printf("Enter data to enqueue: ");
                   scanf("%d", &data);
                   enqueue(data);
                   break;
            case 2:dequeue();
                   break;
            case 3:display();
                   break;
            case 4:printf("Exiting program.\n");
                   exit(0);
            default:
                printf("Invalid choice. Please try again.\n");
        }
    }

    return 0;
}

void enqueue(int data)
{  
    struct node *newnode = (struct node*)malloc(sizeof(struct node));  
    newnode->data = data;  
    newnode->next = NULL;  

    if(front == NULL)
    {  
        front = rear = newnode;
    }
    else 
    {  
        rear->next = newnode;
        rear = newnode;
    }
    rear->next = front;

    printf("%d enqueued to queue.\n", data);
}  

void dequeue()  
{  
    if(front == NULL) 
    {  
        printf("Queue is empty. Cannot dequeue.\n");  
        return;  
    }

    struct node* temp = front; 
    printf("%d dequeued from queue.\n", temp->data);
    
    if(front == rear) 
    {
        front = rear = NULL;
    }
    else 
    {
        front = front->next;
    }
    free(temp);
}  

void display()  
{  
    if(front == NULL) 
    {  
        printf("Queue is empty.\n");  
        return;
    }

    struct node *temp = front;  

    printf("Elements in the circular queue: ");
    do
    {  
        printf("%d ", temp->data);  
        temp = temp->next;  
    } while(temp != front);

    printf("\n");
}  
