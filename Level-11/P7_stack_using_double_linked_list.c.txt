// 7.Program to implement stacks using Double linked lists

#include <stdio.h>
#include <stdlib.h>

struct node 
{
    int data;
    struct node* next;
    struct node* prev;
} *top = NULL;

void push(int e);
int pop();
void display();

int main()
{
    int ch, e;
    while (1)
    {
        printf("1. Push\n");
        printf("2. Pop\n");
        printf("3. Display\n");
        printf("4. Exit\n");
        printf("Enter your choice: ");
        scanf("%d", &ch);
        switch (ch)
        {
            case 1:
                printf("Enter element to push: ");
                scanf("%d", &e);
                push(e);
                break;
            case 2:
                e = pop();
                if (e != -1)
                {
                    printf("Popped element: %d\n", e);
                }
                break;
            case 3:
                display();
                break;
            case 4:
                printf("Exiting program\n");
                exit(0);
            default:
                printf("Invalid choice\n");
        }
    }
    return 0;
}

void push(int e)
{
    struct node* temp = (struct node*)malloc(sizeof(struct node));
    if(!temp)
    {
        printf("Memory allocation failed\n");
        return;
    }
    temp->data = e;
    temp->next = top;
    temp->prev = NULL;
    if(top != NULL)
    {
        top->prev = temp;
    }
    top = temp;
}

int pop()
{
    if(top == NULL)
    {
        printf("Stack is empty\n");
        return -1; 
    }
    struct node *temp = top;
    int popped_element = temp->data;
    top = top->next;
    if(top != NULL)
    {
        top->prev = NULL;
    }
    free(temp);
    return popped_element;
}

void display()
{
    struct node *temp = top;
    if(temp == NULL)
    {
        printf("Stack is empty\n");
        return;
    }
    printf("Stack elements: ");
    while(temp != NULL)
    {
        printf("%d ", temp->data);
        temp = temp->next;
    }
    printf("\n");
}

