// 4.Program to reverse a linked list using recursion

#include<stdio.h>
#include<stdlib.h>

struct node 
{
    int data;
    struct node *next;
};

struct node *head = NULL;

void insert(int n);
void display();
void reverse(struct node *prev, struct node *current);

int main()
{
    int ch, n, data;
    printf("Enter the total number of nodes: ");
    scanf("%d", &n);
    while(1)
    {
        printf("1.Insert\n2.Display\n3.Reverse\n4.Exit\n");
        printf("Enter your choice: ");
        scanf("%d", &ch);
        switch(ch)
        {
            case 1: insert(n);
                    break;
            case 2: display();
                    break;
            case 3: reverse(NULL, head);
                    break;
            case 4: exit(0);
                    break;
        }
    }
    return 0;
}

void insert(int n)
{
    struct node *newNode, *temp;
    int data, i;
    head = (struct node *)malloc(sizeof(struct node));
    if(head == NULL)
    {
        printf("Unable to allocate memory.");
    }
    else
    {
        printf("Enter the data of node 1: ");
        scanf("%d", &data);
        head->data = data; 
        head->next = NULL; 
        temp = head;
        for(i=2; i<=n; i++)
        {
            newNode = (struct node *)malloc(sizeof(struct node));
            if(newNode == NULL)
            {
                printf("Unable to allocate memory.");
                break;
            }
            else
            {
                printf("Enter the data of node %d: ", i);
                scanf("%d", &data);
                newNode->data = data; 
                newNode->next = NULL; 
                temp->next = newNode; 
                temp = temp->next; 
            }
        }
        printf("SINGLY LINKED LIST CREATED SUCCESSFULLY\n");
    }
}

void display()
{
    struct node *temp;
    if(head == NULL)
    {
        printf("List is empty.");
    }
    else
    {
        temp = head;
        while(temp != NULL)
        {
            printf("Data = %d\n", temp->data); 
            temp = temp->next;                 
        }
    }
}

void reverse(struct node *prev, struct node *current)
{
    if(current == NULL) 
    {
        head = prev;
        printf("List reversed successfully.\n");
        return;
    }
    struct node *next = current->next;
    current->next = prev;
    reverse(current, next);
}

