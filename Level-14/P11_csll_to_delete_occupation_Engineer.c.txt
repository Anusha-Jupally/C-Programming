/* 11.CSLL: Store the list of records in a circular singly linked list. Print all entries in the linked list. 
Delete all records which match the occupation “Engineer” and print the CSLL once again.*/


#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#define SIZE 50

typedef struct node 
{
    int id;
    char fname[SIZE];
    char lname[SIZE];
    char gender[SIZE];
    char occupation[SIZE];
    int age;
    struct node *next;
} club_member;

void create_list(club_member **head, club_member m);
void display(club_member *head);
void delete_engineers(club_member **head);
void release_memory(club_member **head);

int main() 
{
    FILE *fp;
    club_member *head = NULL;
    char buf1[SIZE], buf2[SIZE], buf3[SIZE], buf4[SIZE], buf5[SIZE];
    int i;

    fp = fopen("Club_Membership_2020.txt", "r");
    if(fp == NULL) 
    {
        printf("Error in opening file\n");
        exit(1);
    }

    i = 0;
    while(i < 16) 
    {
        club_member m;
        if (i == 0)
            fscanf(fp, "%s %s %s %s %s", buf1, buf2, buf3, buf4, buf5);
        else 
        {
            fscanf(fp, "%d %s %s %s %s %d", &m.id, m.fname, m.lname, m.gender, m.occupation, &m.age);
            create_list(&head, m);
        }
        i++;
    }

    printf("Original List:\n");
    display(head);

    delete_engineers(&head);

    printf("\nList after deleting records with occupation 'Engineer':\n");
    display(head);

    release_memory(&head);
    fclose(fp);
    return 0;
}

void create_list(club_member **head, club_member m) 
{
    club_member *newnode = (club_member *)malloc(sizeof(club_member));
    if (newnode == NULL) 
    {
        printf("Unable to allocate memory\n");
        exit(1);
    }

    *newnode = m;
    if(*head == NULL) 
    {
        newnode->next = newnode;  
        *head = newnode;
    } 
    else 
    {
        club_member *current = *head;
        while(current->next != *head) 
        {
            current = current->next;
        }
        newnode->next = *head;
        current->next = newnode;
    }
}

void display(club_member *head) 
{
    if(head == NULL) 
    {
        printf("No data in the list\n");
        return;
    }

    club_member *current = head;
    printf("ID\tName\t\t\tGender\tOccupation\tAge\n");
    do 
    {
        if(current->fname[0] >= 'J') 
        {
            printf("%d\t%s %s\t\t%s\t%s\t\t%d\n", current->id, current->fname, current->lname, current->gender, current->occupation, current->age);
        }
        current = current->next;
    } while(current != head);
}

void delete_engineers(club_member **head) 
{
    if(*head == NULL) 
    {
        printf("No data in the list\n");
        return;
    }

    club_member *current = *head;
    club_member *prev = NULL;
    club_member *temp = NULL;
    int deleted = 0;

    do 
    {
        if(strcmp(current->occupation, "Engineer") == 0) 
        {
            if(prev == NULL) 
            {
                temp = *head;
                while(temp->next != *head) 
                {
                    temp = temp->next;
                }
                temp->next = current->next;
                *head = current->next;
                free(current);
                current = *head;
            } 
            else 
            {
                prev->next = current->next;
                temp = current;
                current = current->next;
                free(temp);
            }
            deleted = 1;
        } 
        else 
        {
            prev = current;
            current = current->next;
        }
    } while(current != *head);

    if(!deleted) 
    {
        printf("No engineers found in the list\n");
    }
    else
    {
        deleted = 0;
    }
}


void release_memory(club_member **head) 
{
    if (*head == NULL)
        return; 

    club_member *current = *head;
    club_member *temp = NULL;

    do {
        temp = current;
        current = current->next;
        free(temp);
    } while (current != *head); 

    *head = NULL; 
}
