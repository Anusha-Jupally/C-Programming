// 9. Implement quick sort algorithm to sort an array in increasing way

#include<stdio.h>
#define size 10

void quicksort(int arr[],int low,int high);
int partition(int arr[],int low,int high);

int partition(int arr[],int low,int high)
{
    int pivot = arr[high];
    int i =(low - 1);
    int j;
    for(j=low; j<=high-1; j++)
    {
        if(arr[j] < pivot)
        {
            i++;
            int temp=arr[i];
            arr[i]=arr[j];
            arr[j]=temp;
        }
    }
    int temp=arr[i+1];
    arr[i+1]=arr[high];
    arr[high]=temp;
    return (i+1);
}

void quicksort(int arr[],int low,int high)
{
    if(low < high)
    {
        int pi = partition(arr, low, high);
        quicksort(arr, low, pi-1);
        quicksort(arr, pi+1, high);
    }
}

int main()
{
    int n,arr[size],i;
    printf("Enter no of elements:\n");
    scanf("%d",&n);
    printf("Enter the elements:\n");
    for(i=0;i<n;i++)
        scanf("%d",&arr[i]);
    quicksort(arr, 0, n-1);
    printf("Elements in ascending order:\n");
    for(i=0;i<n;i++)
        printf("%d ",arr[i]);
    printf("\n");
    return 0;
}