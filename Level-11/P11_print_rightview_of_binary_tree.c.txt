// 11.Program to print the right view of binary tree

#include<stdio.h>
#include<stdlib.h>

struct node 
{
    int data;
    struct node *left, *right;
};

struct node *newnode(int item) 
{
    struct node *temp = (struct node *)malloc(sizeof(struct node));
    temp->data = item;
    temp->left = temp->right = NULL;
    return temp;
}

void rightView(struct node *root, int level, int *max_level) 
{
    if(root == NULL) 
        return;

    if(*max_level < level) 
    {
        printf("%d ", root->data);
        *max_level = level;
    }

    rightView(root->right, level + 1, max_level);
    rightView(root->left, level + 1, max_level);
}


int main() 
{
    int n,i,value;
    printf("Enter the number of nodes in the binary tree: ");
    scanf("%d", &n);

    struct node *root = NULL;
    printf("Enter the values of nodes: ");
    for(i = 0; i < n; ++i) 
    {
        scanf("%d", &value);
        if(root == NULL) 
        {
            root = newnode(value);
        } 
        else 
        {
            struct node *current = root;
            while(1) 
            {
                if(value > current->data) 
                {
                    if(current->right == NULL) 
                    {
                        current->right = newnode(value);
                        break;
                    }
                    else 
                    {
                        current = current->right;
                    }
                } 
                else 
                {
                    if(current->left == NULL) 
                    {
                        current->left = newnode(value);
                        break;
                    } 
                    else 
                    {
                        current = current->left;
                    }
                }
            }
        }
    }

    printf("Right view of binary tree is: ");
    int max_level = 0;
    rightView(root, 1, &max_level);

    return 0;
}
