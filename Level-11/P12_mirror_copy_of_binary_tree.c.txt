// 12.Program to create a mirror copy of binary tree

#include<stdio.h>
#include<stdlib.h>

struct node 
{
    int data;
    struct node *left, *right;
};


struct node *newnode(int item) 
{
    struct node *temp = (struct node *)malloc(sizeof(struct node));
    temp->data = item;
    temp->left = temp->right = NULL;
    return temp;
}

struct node *mirror(struct node *root) 
{
    if(root == NULL) 
        return NULL;
        
    struct node *left = mirror(root->left);
    struct node *right = mirror(root->right);

    root->left = right;
    root->right = left;

    return root;
}

void inorder(struct node *root) 
{
    if(root == NULL) 
        return;

    inorder(root->left);
    printf("%d ", root->data);
    inorder(root->right);
}

struct node* insert(int arr[], struct node* root, int i, int n) 
{
    if(i < n) 
    {
        struct node* temp = newnode(arr[i]);
        root = temp;
        root->left = insert(arr, root->left, 2 * i + 1, n);
        root->right = insert(arr, root->right, 2 * i + 2, n);
    }
    return root;
}

int main() 
{
    int n;
    printf("Enter the number of nodes in the binary tree: ");
    scanf("%d", &n);

    int arr[n];
    printf("Enter the values of nodes: ");
    for (int i = 0; i < n; i++) 
    {
        scanf("%d", &arr[i]);
    }

    struct node *root = insert(arr, root, 0, n);

    printf("Inorder traversal of original binary tree: ");
    inorder(root);
    printf("\n");

    struct node *mirror_root = mirror(root);

    printf("Inorder traversal of mirror binary tree: ");
    inorder(mirror_root);
    printf("\n");

    return 0;
}
