/* 21.DLL: Store the list of records in a doubly linked list. Sort all entries alphabetically according to occupation. 
Delete entries such that only one entry is present for each occupation in the DLL.*/

#include<stdio.h>
#include<stdlib.h>
#include<string.h>

#define SIZE 100

typedef struct node 
{
    int id;
    char fname[SIZE];
    char lname[SIZE];
    char gender[SIZE];
    char occupation[SIZE];
    int age;
    struct node *prev;
    struct node *next;
} club_member;

void create_list(club_member **head, club_member m);
void sort_list(club_member **head);
void delete_duplicates(club_member **head);
void display_list(club_member *head);
void release_memory(club_member **head);

int main() 
{
    FILE *fp;
    char buf1[SIZE], buf2[SIZE], buf3[SIZE], buf4[SIZE], buf5[SIZE];
    club_member *head = NULL; 

    fp = fopen("Club_Membership_2020.txt", "r");
    if(fp == NULL) 
    {
        printf("Error in opening file\n");
        exit(1);
    }

    int i = 0;
    while(i < 16) 
    {
        club_member m;
        if(i == 0) 
        {
            fscanf(fp, "%s %s %s %s %s", buf1, buf2, buf3, buf4, buf5);
        } 
        else 
        {
            fscanf(fp, "%d %s %s %s %s %d", &m.id, m.fname, m.lname, m.gender, m.occupation, &m.age);
            create_list(&head, m);
        }
        i++;
    }

    printf("\nOriginal list:\n");
    display_list(head);

    sort_list(&head);

    printf("\nSorted list:\n");
    display_list(head);

    delete_duplicates(&head);

    printf("\nModified list after deleting duplicates:\n");
    display_list(head);

    fclose(fp);
    return 0;
}

void create_list(club_member **head, club_member m) 
{
    club_member *newnode = (club_member *)malloc(sizeof(club_member));
    if(newnode == NULL) 
    {
        printf("Cannot allocate memory\n");
        exit(1);
    }
    *newnode = m;
    newnode->prev = NULL;
    newnode->next = NULL;
    if(*head == NULL) 
    {
        *head = newnode;
    } 
    else 
    {
        club_member *temp = *head;
        while(temp->next != NULL) 
        {
            temp = temp->next;
        }
        temp->next = newnode;
        newnode->prev = temp;
    }
}

void sort_list(club_member **head) 
{
    if(*head == NULL || (*head)->next == NULL) 
    {
        return;
    }

    club_member *current = *head;
    club_member *temp = NULL;

    while(current != NULL) 
    {
        temp = current->next;
        while(temp != NULL) 
        {
            if(strcmp(current->occupation, temp->occupation) > 0) 
            {
                char temp_occ[SIZE];
                strcpy(temp_occ, current->occupation);
                strcpy(current->occupation, temp->occupation);
                strcpy(temp->occupation, temp_occ);
            }
            temp = temp->next;
        }
        current = current->next;
    }
}


void delete_duplicates(club_member **head) 
{
    if(*head == NULL || (*head)->next == NULL) 
    {
        return;
    }

    club_member *current = *head;
    club_member *next_node = NULL;

    while(current != NULL && current->next != NULL) 
    {
        next_node = current->next;
        if(strcmp(current->occupation, next_node->occupation) == 0) 
        {
            current->next = next_node->next;
            if(next_node->next != NULL) 
            {
                next_node->next->prev = current;
            }
            free(next_node);
        } 
        else 
        {
            current = current->next;
        }
    }
}

void display_list(club_member *head) 
{
    if(head == NULL) 
    {
        printf("List is empty\n");
        return;
    }

    printf("ID\tName\t\t\tGender\tOccupation\tAge\n");

    club_member *current = head;
    while(current != NULL) 
    {
        printf("%d\t%s %s\t\t%s\t%s\t\t%d\n", current->id, current->fname, current->lname, current->gender, current->occupation, current->age);
        current = current->next;
    }
}

void release_memory(club_member **head) 
{
    club_member *temp = *head;
    while(temp != NULL) 
    {
        club_member *temp1 = temp;
        temp = temp->next;
        free(temp1);
    }
    *head = NULL;
}
