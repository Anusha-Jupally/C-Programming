/* 22.DLL: Store the list of records in a doubly linked list. Delete every alternate entry in the DLL.*/


#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#define SIZE 100

typedef struct node 
{
    int id;
    char fname[SIZE];
    char lname[SIZE];
    char gender[SIZE];
    char occupation[SIZE];
    int age;
    struct node *prev;
    struct node *next;
} club_member;


void create_list(club_member **head, club_member m);
void delete_alternate_entries(club_member **head);
void display_list(club_member *head);
void release_memory(club_member **head);

int main() 
{
    FILE *fp;
    char buf1[SIZE], buf2[SIZE], buf3[SIZE], buf4[SIZE], buf5[SIZE];
    club_member *head = NULL; 

    fp = fopen("Club_Membership_2020.txt", "r");
    if(fp == NULL) 
    {
        printf("Error in opening file\n");
        exit(1);
    }

    int i = 0;
    while(i < 16) 
    {
        club_member m;
        if(i == 0) 
        {
            fscanf(fp, "%s %s %s %s %s", buf1, buf2, buf3, buf4, buf5);
        } 
        else \
        {
            fscanf(fp, "%d %s %s %s %s %d", &m.id, m.fname, m.lname, m.gender, m.occupation, &m.age);
            create_list(&head, m);
        }
        i++;
    }

    fclose(fp);

    printf("\nBefore deleting alternate entries:\n");
    display_list(head);

    delete_alternate_entries(&head);

    printf("\nAfter deleting alternate entries:\n");
    display_list(head);

    release_memory(&head);

    return 0;
}

void create_list(club_member **head, club_member m) 
{
    club_member *newnode = (club_member *)malloc(sizeof(club_member));
    if(newnode == NULL) 
    {
        printf("Cannot allocate memory\n");
        exit(1);
    }
    *newnode = m;
    newnode->prev = NULL;
    newnode->next = NULL;
    if(*head == NULL) 
    {
        *head = newnode;
    } 
    else 
    {
        club_member *temp = *head;
        while(temp->next != NULL) 
        {
            temp = temp->next;
        }
        temp->next = newnode;
        newnode->prev = temp;
    }
}

void delete_alternate_entries(club_member **head) 
{
    if(*head == NULL || (*head)->next == NULL) 
    {
        return; 
    }

    club_member *current = *head;
    club_member *temp = NULL;

    while(current != NULL && current->next != NULL) 
    {
        temp = current->next;
        current->next = temp->next;
        if(temp->next != NULL) 
        {
            temp->next->prev = current;
        }
        free(temp);
        current = current->next;
    }
}

void display_list(club_member *head) 
{
    if(head == NULL) 
    {
        printf("List is empty\n");
        return;
    }

    printf("ID\tName\t\tGender\tOccupation\tAge\n");

    club_member *current = head;
    while(current != NULL) 
    {
        printf("%d\t%s %s\t%s\t%s\t\t%d\n", current->id, current->fname, current->lname, current->gender, current->occupation, current->age);
        current = current->next;
    }
}

void release_memory(club_member **head) 
{
    club_member *temp = *head;
    while(temp != NULL) 
    {
        club_member *temp1 = temp;
        temp = temp->next;
        free(temp1);
    }
    *head = NULL;
}
