/* 2.Program to implement Double linked list with functions insert_at_front, 
insert_at_rear, insert_at_position, delete_at_front, delete_at_rear, delete_at_position */

#include<stdio.h>
#include<stdlib.h>

struct node 
{
    int data;
    struct node* prev;
    struct node* next;
};

struct node* head = NULL;

void insert_at_front(int data);
void insert_at_rear(int data);
void insert_at_position(int data, int position);
void delete_at_front();
void delete_at_rear();
void delete_at_position(int position);
void displayList();


int main() 
{
    int ch, data, position;
    while (1) 
    {
        printf("\n1. Insert at Front\n");
        printf("2. Insert at Rear\n");
        printf("3. Insert at Position\n");
        printf("4. Delete at Front\n");
        printf("5. Delete at Rear\n");
        printf("6. Delete at Position\n");
        printf("7. Display List\n");
        printf("8. Exit\n");
        printf("Enter your choice: ");
        scanf("%d", &ch);

        switch (ch) 
        {
            case 1:
                printf("Enter data to insert at front: ");
                scanf("%d", &data);
                insert_at_front(data);
                break;
            case 2:
                printf("Enter data to insert at rear: ");
                scanf("%d", &data);
                insert_at_rear(data);
                break;
            case 3:
                printf("Enter data to insert: ");
                scanf("%d", &data);
                printf("Enter position to insert: ");
                scanf("%d", &position);
                insert_at_position(data, position);
                break;
            case 4:
                delete_at_front();
                break;
            case 5:
                delete_at_rear();
                break;
            case 6:
                printf("Enter position to delete: ");
                scanf("%d", &position);
                delete_at_position(position);
                break;
            case 7:
                displayList();
                break;
            case 8:
                printf("Exiting program.\n");
                exit(0);
            default:
                printf("Invalid choice, please try again.\n");
        }
    }
    return 0;
}

struct node* createNode(int data) 
{
    struct node* newNode = (struct node*)malloc(sizeof(struct node));
    if (newNode == NULL) 
    {
        printf("Memory allocation failed.");
        exit(1);
    }
    newNode->data = data;
    newNode->prev = NULL;
    newNode->next = NULL;
    return newNode;
}

void insert_at_front(int data) 
{
    struct node* newNode = createNode(data);
    if(head == NULL) 
    {
        head = newNode;
    } 
    else 
    {
        newNode->next = head;
        head->prev = newNode;
        head = newNode;
    }
    printf("Node inserted at the front successfully.\n");
}

void insert_at_rear(int data) 
{
    struct node* newNode = createNode(data);
    if(head == NULL) 
    {
        head = newNode;
    } 
    else 
    {
        struct node* temp = head;
        while(temp->next != NULL) 
        {
            temp = temp->next;
        }
        temp->next = newNode;
        newNode->prev = temp;
    }
    printf("Node inserted at the rear successfully.\n");
}

void insert_at_position(int data, int position) 
{
    if(position < 1) 
    {
        printf("Invalid position.\n");
        return;
    }
    if(position == 1) 
    {
        insert_at_front(data);
        return;
    }
    struct node* newNode = createNode(data);
    struct node* temp = head;
    int count = 1;
    while(temp != NULL && count < position - 1) 
    {
        temp = temp->next;
        count++;
    }
    if(temp == NULL) 
    {
        printf("Invalid position.\n");
        return;
    }
    newNode->next = temp->next;
    newNode->prev = temp;
    if(temp->next != NULL) 
    {
        temp->next->prev = newNode;
    }
    temp->next = newNode;
    printf("Node inserted at position %d successfully.\n", position);
}

void delete_at_front() 
{
    if(head == NULL) 
    {
        printf("List is empty, cannot delete.\n");
        return;
    }
    struct node* temp = head;
    head = head->next;
    if(head != NULL) 
    {
        head->prev = NULL;
    }
    free(temp);
    printf("Node deleted from the front successfully.\n");
}


void delete_at_rear() 
{
    if(head == NULL) 
    {
        printf("List is empty, cannot delete.\n");
        return;
    }
    struct node* temp = head;
    while(temp->next != NULL) 
    {
        temp = temp->next;
    }
    if(temp->prev != NULL) 
    {
        temp->prev->next = NULL;
    } 
    else 
    {
        head = NULL;
    }
    free(temp);
    printf("Node deleted from the rear successfully.\n");
}


void delete_at_position(int position) 
{
    if(head == NULL) 
    {
        printf("List is empty, cannot delete.\n");
        return;
    }
    if(position < 1) 
    {
        printf("Invalid position.\n");
        return;
    }
    if(position == 1) 
    {
        delete_at_front();
        return;
    }
    struct node* temp = head;
    int count = 1;
    while(temp != NULL && count < position) 
    {
        temp = temp->next;
        count++;
    }
    if(temp == NULL) 
    {
        printf("Invalid position.\n");
        return;
    }
    if(temp->next != NULL) 
    {
        temp->next->prev = temp->prev;
    }
    temp->prev->next = temp->next;
    free(temp);
    printf("Node deleted from position %d successfully.\n", position);
}

void displayList() 
{
    struct node* temp = head;
    if(temp == NULL) 
    {
        printf("List is empty.\n");
        return;
    }
    printf("Doubly linked list: ");
    while(temp != NULL) 
    {
        printf("%d ", temp->data);
        temp = temp->next;
    }
    printf("\n");
}
